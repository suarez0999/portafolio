---
// Importación de íconos
import SunIcon from "@icons/SunIcon.astro";
import MoonIcon from "@icons/MoonIcon.astro";
import SystemIcon from "@icons/SystemIcon.astro";

const THEMES = ["Light", "Dark", "System"];
---

<div class="relative">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex items-center justify-center w-12 h-12 rounded-full hover:scale-110 transition-all duration-200 outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-500"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-6 transition-transform duration-300" />
    <MoonIcon id="dark" class="theme-toggle-icon absolute size-6 transition-transform duration-300" />
    <SystemIcon id="system" class="theme-toggle-icon absolute size-6 transition-transform duration-300" />
  </button>
  <div
    id="themes-menu"
    class="absolute hidden left-1/2 -translate-x-1/2 scale-75 opacity-0 top-10 text-base p-2 min-w-[12rem] rounded-lg border border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-600 shadow-lg transition-all duration-300"
  >
    <ul>
      {THEMES.map((theme) => (
        <li
          class="themes-menu-option px-4 py-2 cursor-pointer text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors font-Poppins font-semibold"
          tabindex="0"
        >
          {theme}
        </li>
      ))}
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: block;
    scale: 1;
    opacity: 1;
  }

  #theme-toggle-btn:focus-visible {
    outline: none;
  }
</style>

<script is:inline>
  let remove = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");
  const toggleBtn = document.getElementById("theme-toggle-btn");

  const getThemePreference = () => localStorage.getItem("theme") ?? "system";

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((icon) => {
      icon.style.transform = icon.id === themePreference ? "scale(1)" : "scale(0)";
    });
  };

  const updateTheme = () => {
    if (remove) remove();
    matchMedia.addEventListener("change", updateTheme);
    remove = () => matchMedia.removeEventListener("change", updateTheme);

    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList.toggle("dark", isDark);
  };

  updateTheme();

  document.addEventListener("click", () => themesMenu.classList.remove("open"));
  toggleBtn.addEventListener("click", (e) => {
    e.stopPropagation();
    const isOpen = themesMenu.classList.contains("open");
    themesMenu.classList.toggle("open", !isOpen);
  });

  document.querySelectorAll(".themes-menu-option").forEach((option) => {
    option.addEventListener("click", (e) => {
      const theme = e.target.innerText.toLowerCase();
      localStorage.setItem("theme", theme);
      themesMenu.classList.remove("open");
      updateTheme();
    });

    option.addEventListener("keydown", (e) => {
      if (e.key === "Enter") option.click();
    });
  });

  document.addEventListener("astro:after-swap", updateTheme);
</script>
