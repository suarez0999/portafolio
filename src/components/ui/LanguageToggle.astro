---
import SunIcon from "@icons/SunIcon.astro";
import MoonIcon from "@icons/MoonIcon.astro";
import systemIcon from "@icons/SystemIcon.astro";

const LANGUAGES = ["Spanish", "English", "systemLanguage"];
---

<div class="relative ml-1 mr-1">
  <button
    transition:persist
    id="language-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Select Language</span>
    <SunIcon id="spanish" class="language-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="english"
      class="language-toggle-icon absolute size-5 transition-all"
    />
    <systemLanguageIcon
      id="systemLanguage"
      class="language-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    transition:persist
    id="languages-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        LANGUAGES.map((language) => (
          <li class="languages-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {language}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #languages-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  let remove = null;
  const languagesMenu = document.getElementById("languages-menu");

  const getLanguagePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("language") ?? "systemLanguage";
    }

    return "systemLanguage";
  };

  const updateIcon = (languagePreference) => {
    document.querySelectorAll(".language-toggle-icon").forEach((element) => {
      element.style.scale = element.id === languagePreference ? "1" : "0";
    });
  };

  const updateLanguage = () => {
    const languagePreference = getLanguagePreference();

    updateIcon(languagePreference);
  };

  updateLanguage();

  document.addEventListener("click", () => languagesMenu.classList.remove("open"));

  document.getElementById("language-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !languagesMenu.classList.contains("open");
    languagesMenu.classList[isClosed ? "add" : "remove"]("open");
  });

  document.querySelectorAll(".languages-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      const selectedLanguage = e.target.innerText.toLowerCase().trim();
      localStorage.setItem("language", selectedLanguage);
      updateLanguage();
      languagesMenu.classList.remove("open");
    });
  });
</script>
