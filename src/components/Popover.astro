---
// Popover.astro
export interface Props {
  className?: string;
  position?: "top" | "bottom" | "left" | "right";
}

const { className = '', position = "top" } = Astro.props;

const positionClasses = {
  top: "-translate-x-1/2 bottom-full left-1/2 mb-2",
  bottom: "-translate-x-1/2 top-full left-1/2 mt-2",
  left: "-translate-y-1/2 right-full top-1/2 mr-2",
  right: "-translate-y-1/2 left-full top-1/2 ml-2",
};
---
<div class={`relative inline-block ${className}`}>
  <!-- Botón -->
  <div class="inline-block popover-button">
    <slot name="buttonContent" />
  </div>

  <!-- Popover -->
  <div
    role="tooltip"
    class={`absolute z-10 hidden w-64 text-sm text-gray-500 bg-white border border-gray-200 rounded-lg shadow-md dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800 ${positionClasses[position]}`}
  >
    <!-- Encabezado -->
    <div class="px-3 py-2 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:bg-gray-700 dark:border-gray-600">
      <slot name="title">
        <!-- Fallback en caso de que no se pase contenido -->
        <span class="text-gray-700 dark:text-white">Sin Título</span>
      </slot>
    </div>
    <!-- Contenido -->
    <div class="px-3 py-2">
      <slot name="content" />
      <!-- Triángulo invertido -->
      <div
        class={`absolute w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent ${position === "top" ? "border-t-gray-200 dark:border-t-gray-600" : ""}`}
      ></div>
    </div>
  </div>

  <!-- Script -->
  <script is:inline>
    const popoverButton = document.querySelector(".popover-button");
    const popover = popoverButton.nextElementSibling;

    const togglePopover = (visible) => {
      popover.classList.toggle("hidden", !visible);
      popover.classList.toggle("block", visible);
    };

    popoverButton.addEventListener("mouseenter", () => togglePopover(true));
    popoverButton.addEventListener("mouseleave", () => togglePopover(false));
  </script>
</div>
